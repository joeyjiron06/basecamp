---
import '../styles/global.css';
import { GithubIcon, MoonIcon, MenuIcon, SunIcon } from 'astro-feather';
import TwitterLogo from '~/components/twitterLogo.astro';
import Logo from '~/components/logo.astro';
import clsx from 'clsx';

interface Props {
  title: string;
  autoExpandSidebar?: boolean;
}

const { title, autoExpandSidebar } = Astro.props;

const ProjectName = 'Snips';
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Home place for my code snippets' />
    <meta name='viewport' content='width=device-width' />
    <link
      rel='icon'
      type='image/svg+xml'
      href={`${import.meta.env.BASE_URL}/favicon.svg`}
    />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>

    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap'
      rel='stylesheet'
    />
  </head>
  <body>
    <header>
      <div>
        <Logo />
      </div>

      <nav>
        <ul>
          <li class='hidden sm:block'>
            <a href=`${import.meta.env.BASE_URL}/docs`>Docs</a>
          </li>
          <li>
            <a href='https://github.com/joeyjiron06/snips'>
              <GithubIcon customClasses='w-4 h-4' />
            </a>
          </li>
          <li>
            <a href='https://twitter.com/joeyjiron06'>
              <TwitterLogo customClasses='w-4 h-4' />
            </a>
          </li>
          <li>
            <button id='theme-toggle' class='btn-ghost px-2'>
              <MoonIcon customClasses='w-4 h-4 block dark:hidden' />
              <SunIcon customClasses='w-4 h-4 hidden dark:block' />
            </button>
          </li>
        </ul>
      </nav>
    </header>

    <main>
      <slot />
    </main>

    <footer>this is the footer</footer>
  </body>
</html>

<script>
  const themeToggle = document.getElementById('theme-toggle');

  function toggleTheme() {
    const currentTheme = getCurrentTheme();

    const preferredTheme = currentTheme === 'light' ? 'dark' : 'light';

    setTheme(preferredTheme);
  }

  function getCurrentTheme() {
    return getSavedTheme() || getSystemTheme();
  }

  function getSavedTheme() {
    return localStorage?.getItem('theme');
  }

  function savedTheme(theme: string) {
    localStorage?.setItem('theme', theme);
  }

  function getSystemTheme() {
    if (
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches
    ) {
      return 'dark';
    }

    return 'light';
  }

  function setTheme(theme: string) {
    savedTheme(theme);
    document.documentElement.setAttribute('data-theme', theme);
  }

  function loadTheme() {
    const savedTheme = getSavedTheme();

    if (!savedTheme) {
      return;
    }

    setTheme(savedTheme);
  }

  if (themeToggle) {
    themeToggle.addEventListener('click', (event) => {
      event.preventDefault();
      toggleTheme();
    });
  }

  loadTheme();
</script>
